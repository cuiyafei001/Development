#!/usr/bin/env python

# -*- coding: UTF-8 -*-

# 递归函数
# 在函数内部，可以调用其他函数，如果一个函数在内部调用本身，这个函数就是递归函数
# 1.递归的基本原理：
# 每一次函数调用都会有一次返回．当程序流执行到某一级递归的结尾处时，它会转移到前一级递归继续执行（调用本身函数）
# 递归函数中，位于递归调用前的语句和各级被调函数具有相同的顺序
# 虽然每一级递归有自己的变量，但是函数代码并不会得到复制
# 递归函数中必须包含可以终止递归调用的语句
def fun2(i):
    print(i)
    if i == 5:
        return 5
    r = fun2(i + 1)
    return r
fun2(1)

# 二.冒泡排序
# 冒泡排序一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。

# 冒泡排序算法的运作如下：
# 比较相邻的元素。如果第一个比第二个大，就交换他们两个。
# 对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。
# 针对所有的元素重复以上的步骤，除了最后一个。
# 持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。

lis_t = [22, 32, 13, 78, 21]                # 定义一个数组
for i in range(1, len(lis_t)):             # 使用range()函数放在for，循环出lis_t的每个值
    for j in range(len(lis_t) - i):        #
        if lis_t[j] > lis_t[j + 1]:
            temp = lis_t[j]
            lis_t[j] = lis_t[j + 1]
            lis_t[j + 1] = temp
print(lis_t)


